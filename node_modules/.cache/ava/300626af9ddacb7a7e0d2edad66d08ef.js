'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _quillDelta = require('quill-delta');

var _quillDelta2 = _interopRequireDefault(_quillDelta);

var _ = require('..');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readTestFile(testfile) {
  let testPath = _path2.default.join(__dirname, 'data', testfile);
  return new Promise((res, rej) => {
    _fs2.default.readFile(testPath, { encoding: 'ascii' }, (err, data) => {
      if (err) rej(err);else res(data);
    });
  });
}

(0, _ava2.default)('test color', async t => {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  let rtfData = await readTestFile('test-color.rtf');
  let converter = new _2.default();
  let delta = await converter.convert(rtfData);

  t.true(_rec._expr(_rec._capt(_rec._capt(delta, 'arguments/0/left') instanceof _rec._capt(_quillDelta2.default, 'arguments/0/right'), 'arguments/0'), {
    content: 't.true(delta instanceof Delta, \'class check\')',
    filepath: 'test/test-simple.js',
    line: 27,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"delta","range":[7,12]},"right":{"type":"Identifier","name":"Delta","range":[24,29]},"range":[7,29]},{"type":"StringLiteral","value":"class check","range":[31,44]}],"range":[0,45]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"delta","range":[7,12]},{"type":{"label":"instanceof"},"value":"instanceof","range":[13,23]},{"type":{"label":"name"},"value":"Delta","range":[24,29]},{"type":{"label":","},"range":[29,30]},{"type":{"label":"string"},"value":"class check","range":[31,44]},{"type":{"label":")"},"range":[44,45]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'class check');
  t.true(_rec2._expr(_rec2._capt(_rec2._capt(delta, 'arguments/0/callee/object').hasOwnProperty('ops'), 'arguments/0'), {
    content: 't.true(delta.hasOwnProperty(\'ops\'), \'property check\')',
    filepath: 'test/test-simple.js',
    line: 28,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"delta","range":[7,12]},"property":{"type":"Identifier","name":"hasOwnProperty","range":[13,27]},"computed":false,"range":[7,27]},"arguments":[{"type":"StringLiteral","value":"ops","range":[28,33]}],"range":[7,34]},{"type":"StringLiteral","value":"property check","range":[36,52]}],"range":[0,53]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"delta","range":[7,12]},{"type":{"label":"."},"range":[12,13]},{"type":{"label":"name"},"value":"hasOwnProperty","range":[13,27]},{"type":{"label":"("},"range":[27,28]},{"type":{"label":"string"},"value":"ops","range":[28,33]},{"type":{"label":")"},"range":[33,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"property check","range":[36,52]},{"type":{"label":")"},"range":[52,53]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'property check');

  t.is(delta.ops[0].insert, 'ABC');
  t.is(delta.ops[1].insert, 'DEFGHIJ');
  t.is(delta.ops[1].attributes.color, '#fb0207');
  t.is(delta.ops[2].insert, 'KLM');

  t.is(delta.ops[4].insert, 'NOPQRSTUVWXYZ');
  t.is(delta.ops[4].attributes.color, '#21ff06');
});

(0, _ava2.default)('test deco', async t => {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  let rtfData = await readTestFile('test-deco.rtf');
  let converter = new _2.default();
  let delta = await converter.convert(rtfData);

  t.true(_rec3._expr(_rec3._capt(_rec3._capt(delta, 'arguments/0/left') instanceof _rec3._capt(_quillDelta2.default, 'arguments/0/right'), 'arguments/0'), {
    content: 't.true(delta instanceof Delta, \'class check\')',
    filepath: 'test/test-simple.js',
    line: 46,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"delta","range":[7,12]},"right":{"type":"Identifier","name":"Delta","range":[24,29]},"range":[7,29]},{"type":"StringLiteral","value":"class check","range":[31,44]}],"range":[0,45]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"delta","range":[7,12]},{"type":{"label":"instanceof"},"value":"instanceof","range":[13,23]},{"type":{"label":"name"},"value":"Delta","range":[24,29]},{"type":{"label":","},"range":[29,30]},{"type":{"label":"string"},"value":"class check","range":[31,44]},{"type":{"label":")"},"range":[44,45]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'class check');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(delta, 'arguments/0/callee/object').hasOwnProperty('ops'), 'arguments/0'), {
    content: 't.true(delta.hasOwnProperty(\'ops\'), \'property check\')',
    filepath: 'test/test-simple.js',
    line: 47,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"delta","range":[7,12]},"property":{"type":"Identifier","name":"hasOwnProperty","range":[13,27]},"computed":false,"range":[7,27]},"arguments":[{"type":"StringLiteral","value":"ops","range":[28,33]}],"range":[7,34]},{"type":"StringLiteral","value":"property check","range":[36,52]}],"range":[0,53]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"delta","range":[7,12]},{"type":{"label":"."},"range":[12,13]},{"type":{"label":"name"},"value":"hasOwnProperty","range":[13,27]},{"type":{"label":"("},"range":[27,28]},{"type":{"label":"string"},"value":"ops","range":[28,33]},{"type":{"label":")"},"range":[33,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"property check","range":[36,52]},{"type":{"label":")"},"range":[52,53]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'property check');

  let b = 0;
  t.is(delta.ops[b + 0].insert, 'ABC');
  t.is(delta.ops[b + 1].insert, 'DEFGHIJ');
  t.is(delta.ops[b + 1].attributes.bold, true);
  t.is(delta.ops[b + 2].insert, 'KLM');
  t.is(delta.ops[b + 3].insert, '\n');
  t.is(delta.ops[b + 4].insert, 'NOPQRSTUVWXYZ');
  t.is(delta.ops[b + 4].attributes.bold, true);
  t.is(delta.ops[b + 5].insert, '\n');
  t.is(delta.ops[b + 6].insert, 'abcdefghijklmnopqrstuvwxyz');
  t.is(delta.ops[b + 7].insert, '\n');

  b = 8;
  t.is(delta.ops[b + 0].insert, 'ABC');
  t.is(delta.ops[b + 1].insert, 'DEFGHIJ');
  t.is(delta.ops[b + 1].attributes.italic, true);
  t.is(delta.ops[b + 2].insert, 'KLM');
  t.is(delta.ops[b + 3].insert, '\n');
  t.is(delta.ops[b + 4].insert, 'NOPQRSTUVWXYZ');
  t.is(delta.ops[b + 4].attributes.italic, true);
  t.is(delta.ops[b + 5].insert, '\n');
  t.is(delta.ops[b + 6].insert, 'abcdefghijklmnopqrstuvwxyz');
  t.is(delta.ops[b + 7].insert, '\n');

  b = 16;
  t.is(delta.ops[b + 0].insert, 'ABC');
  t.is(delta.ops[b + 1].insert, 'DEFGHIJ');
  t.is(delta.ops[b + 1].attributes.underline, true);
  t.is(delta.ops[b + 2].insert, 'KLM');
  t.is(delta.ops[b + 3].insert, '\n');
  t.is(delta.ops[b + 4].insert, 'NOPQRSTUVWXYZ');
  t.is(delta.ops[b + 4].attributes.underline, true);
  t.is(delta.ops[b + 5].insert, '\n');
  t.is(delta.ops[b + 6].insert, 'abcdefghijklmnopqrstuvwxyz');
  t.is(delta.ops[b + 7].insert, '\n');

  b = 24;
  t.is(delta.ops[b + 0].insert, 'ABC');
  t.is(delta.ops[b + 1].insert, 'DEFGHIJ');
  t.is(delta.ops[b + 1].attributes.strike, true);
  t.is(delta.ops[b + 2].insert, 'KLM');
  t.is(delta.ops[b + 3].insert, '\n');
  t.is(delta.ops[b + 4].insert, 'NOPQRSTUVWXYZ');
  t.is(delta.ops[b + 4].attributes.strike, true);
  t.is(delta.ops[b + 5].insert, '\n');
  t.is(delta.ops[b + 6].insert, 'abcdefghijklmnopqrstuvwxyz');
  t.is(delta.ops[b + 7].insert, '\n');
});
//# sourceMappingURL=/Users/kent/WorkSpace/mygithub/rtf-to-quill-delta/node_modules/.cache/ava/300626af9ddacb7a7e0d2edad66d08ef.js.map